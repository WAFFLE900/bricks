{"version":3,"file":"stories-general-Color-mdx.75087853dbc7b9da3e09.hot-update.js","mappingssources":["webpack://storybook/./src/stories/general/Color.mdx"],"sourcesContent":["\nimport React from 'react';\n\n/*@jsxRuntime automatic @jsxImportSource react*/\n/*src/stories/general/Color.mdx*/\n// Repeat generatnig a block for each color in the grey_scale array\n// compute the greyscale value of Color[name]\n// if the greyscale value is less than 128, use white text, otherwise use black text\n// Generate a block with a square with background: Color[name], and text: name\n// Repeat generatnig a block for each color in the grey_scale array\n// compute the greyscale value of Color[name]\n// if the greyscale value is less than 128, use white text, otherwise use black text\n// Generate a block with a square with background: Color[name], and text: name\nimport {Fragment as _Fragment, jsx as _jsx, jsxs as _jsxs} from \"react/jsx-runtime\";\nimport {useMDXComponents as _provideComponents} from \"@storybook/addon-essentials/docs/mdx-react-shim\";\nimport {Meta} from '@storybook/blocks';\nimport Color from '../../components/Color.json';\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      div: \"div\",\n      span: \"span\",\n      strong: \"strong\",\n      p: \"p\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [\"\\n\", \"\\n\", _jsx(Meta, {\n        title: \"General 通用/Colors 色彩\"\n      }), \"\\n\", _jsx(\"style\", {\n        children: `\n  .subheading {\n    --mediumdark: '#999999';\n    font-weight: 700;\n    font-size: 15px;\n    color: #999;\n    letter-spacing: 6px;\n    line-height: 24px;\n    text-transform: capitalize;\n    margin-bottom: 12px;\n    margin-top: 40px;\n  }\n\n  .my-list {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(205px, 1fr));\n    grid-template-rows: 1fr 1fr;\n    row-gap: 15px;\n    column-gap: 15px;\n  }\n\n  @media all and (-ms-high-contrast:none) {\n  .my-list {\n      display: -ms-grid;\n      -ms-grid-columns: 1fr 1fr;\n      -ms-grid-rows: 1fr 1fr;\n    }\n  }\n\n  .my-item {\n    display: block;\n    padding: 20px;\n    border: 1px solid #00000010;\n    border-radius: 5px;\n    transition: background 0.5s ease-out, border 150ms ease-out, transform 150ms ease-out;\n    color: #333333;\n    background: #ffffff;\n    display: flex;\n    align-items: flex-start;\n  }\n\n  .my-item:hover {\n    border-color: #1EA7FD50;\n    transform: translate3d(0, -3px, 0);\n    box-shadow: rgba(0, 0, 0, 0.08) 0 3px 10px 0;\n  }\n\n  .my-item:active {\n    border-color: #1EA7FD;\n    transform: translate3d(0, 0, 0);\n  }\n\n  .my-item strong {\n    font-weight: 700;\n    display: block;\n    margin-bottom: 2px;\n  }\n\n  .my-item span,\n  .my-item p {\n    margin: 0;\n    font-size: 14px;\n    line-height: 20px;\n    transition: color 0.5s ease;\n  }\n\n  .my-item .color-box {\n    width: 40px;\n    height: 40px;\n    border-radius: 5px;\n    margin: 0 10px 0 0;\n  }\n  .my-item:hover .color-box {\n    width: auto;\n    height: 40px;\n    border-radius: 5px;\n    margin: 0;\n  }\n  .my-item:hover .darkonhover {\n    color: #EEEEEE;\n  }\n  .my-item:hover :not(.darkonhover) {\n    color: #B82C30;\n  }\n  `\n      }), \"\\n\", _jsx(_components.h1, {\n        id: \"colors-色彩\",\n        children: \"Colors 色彩\"\n      }), \"\\n\", _jsx(\"div\", {\n        className: \"subheading\",\n        children: \"Primary 主要色系\"\n      }), \"\\n\", _jsx(\"div\", {\n        className: \"my-list\",\n        children: Color[\"reds\"].map(name => {\n          // compute the greyscale value of Color[name]\n          const grey = parseInt(Color[name].slice(1, 3), 16) * 0.299 + parseInt(Color[name].slice(3, 5), 16) * 0.587 + parseInt(Color[name].slice(5, 7), 16) * 0.114;\n          // if the greyscale value is less than 128, use white text, otherwise use black text\n          const darkonhover = grey < 200 ? \"darkonhover\" : \"\";\n          // Generate a block with a square with background: Color[name], and text: name\n          return _jsxs(_components.div, {\n            className: \"my-item\",\n            onMouseOver: e => {\n              e.currentTarget.style.backgroundColor = Color[name];\n            },\n            onMouseOut: e => {\n              e.currentTarget.style.backgroundColor = 'white';\n            },\n            children: [_jsx(_components.div, {\n              className: \"color-box\",\n              style: {\n                background: Color[name]\n              }\n            }), _jsxs(_components.span, {\n              className: darkonhover,\n              children: [_jsx(_components.strong, {\n                children: name.toUpperCase()\n              }), _jsx(_components.p, {\n                className: darkonhover,\n                children: Color[name]\n              })]\n            })]\n          }, name);\n        })\n      }), \"\\n\", _jsx(\"div\", {\n        className: \"subheading\",\n        children: \"Grey Scale 灰階\"\n      }), \"\\n\", _jsx(\"div\", {\n        className: \"my-list\",\n        children: Color[\"grey_scale\"].map(name => {\n          // compute the greyscale value of Color[name]\n          const grey = parseInt(Color[name].slice(1, 3), 16) * 0.299 + parseInt(Color[name].slice(3, 5), 16) * 0.587 + parseInt(Color[name].slice(5, 7), 16) * 0.114;\n          // if the greyscale value is less than 128, use white text, otherwise use black text\n          const darkonhover = grey < 180 ? \"darkonhover\" : \"\";\n          // Generate a block with a square with background: Color[name], and text: name\n          return _jsxs(_components.div, {\n            className: \"my-item\",\n            onMouseOver: e => {\n              e.currentTarget.style.backgroundColor = Color[name];\n            },\n            onMouseOut: e => {\n              e.currentTarget.style.backgroundColor = 'white';\n            },\n            children: [_jsx(_components.div, {\n              className: \"color-box\",\n              style: {\n                background: Color[name]\n              }\n            }), _jsxs(_components.span, {\n              className: darkonhover,\n              children: [_jsx(_components.strong, {\n                children: name.toUpperCase()\n              }), _jsx(_components.p, {\n                className: darkonhover,\n                children: Color[name]\n              })]\n            })]\n          }, name);\n        })\n      })]\n    });\n  }\n}\nexport default MDXContent;\n"],"names":[],"sourceRoot":""}